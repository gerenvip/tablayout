apply plugin: 'com.android.library'

def getConfigProperty(String configName) {
    def versionPropsFile = file('config.properties')
    def versionProps = new Properties()
    versionProps.load(versionPropsFile.newReader())
    return versionProps.getProperty(configName)
}

def COMPILE_SDK_VERSION = hasProperty('COMPILE_SDK_VERSION') ? property('COMPILE_SDK_VERSION') : getConfigProperty('COMPILE_SDK_VERSION')
def BUILD_TOOLS_VERSION = hasProperty('BUILD_TOOLS_VERSION') ? property('BUILD_TOOLS_VERSION') : getConfigProperty('BUILD_TOOLS_VERSION')
def MIN_SDK_VERSION = hasProperty('MIN_SDK_VERSION') ? property('MIN_SDK_VERSION') : getConfigProperty('MIN_SDK_VERSION')
def TARGET_SDK_VERSION = hasProperty('TARGET_SDK_VERSION') ? property('TARGET_SDK_VERSION') : getConfigProperty('TARGET_SDK_VERSION')
def X_APPCOMPAT_VERSION = hasProperty('X_APPCOMPAT_VERSION') ? property('X_APPCOMPAT_VERSION') : getConfigProperty('X_APPCOMPAT_VERSION')


android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode 1
        versionName LIB_VERSION

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$X_APPCOMPAT_VERSION"
    implementation "androidx.viewpager:viewpager:1.0.0"
    implementation "com.google.android.material:material:$MATERIAL_VERSION"
}

//需要打包发布时 取消注释
if (rootProject.file("${rootProject.projectDir}/jcenter_scripts/bintrayUpload.gradle").exists()) {
    apply from: "${rootProject.projectDir}/jcenter_scripts/bintrayUpload.gradle"
}
//publish to nexus
//apply from: "${rootProject.projectDir}/nexus_scripts/nexusUpload.gradle"